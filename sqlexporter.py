# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'opwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sys
import exportsql
import tkinter as tk
from tkinter import filedialog
import qtloading
import re
import time

class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(753, 529)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 50, 622, 91))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.input_key = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.input_key.setMinimumSize(QtCore.QSize(40, 30))
        self.input_key.setMaximumSize(QtCore.QSize(200, 16777215))
        self.input_key.setObjectName("input_key")
        self.gridLayout.addWidget(self.input_key, 2, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_6.setMinimumSize(QtCore.QSize(0, 30))
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 2, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_2.setMinimumSize(QtCore.QSize(40, 30))
        self.label_2.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_3.setMinimumSize(QtCore.QSize(0, 30))
        self.label_3.setMaximumSize(QtCore.QSize(150, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.gridLayoutWidget)
        self.label_5.setMinimumSize(QtCore.QSize(0, 30))
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 2, 1, 1)
        self.db_source = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.db_source.setMinimumSize(QtCore.QSize(80, 30))
        self.db_source.setMaximumSize(QtCore.QSize(200, 16777215))
        self.db_source.setBaseSize(QtCore.QSize(0, 0))
        self.db_source.setIconSize(QtCore.QSize(16, 16))
        self.db_source.setObjectName("db_source")
        self.db_source.addItem("")
        self.db_source.addItem("")
        self.gridLayout.addWidget(self.db_source, 1, 1, 1, 1)
        self.export_button = QtWidgets.QPushButton(self.centralwidget)
        self.export_button.setGeometry(QtCore.QRect(115, 160, 200, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.export_button.setFont(font)
        self.export_button.setObjectName("export_button")

        self.exchange_button = QtWidgets.QPushButton(self.centralwidget)
        self.exchange_button.setGeometry(QtCore.QRect(115, 210, 200, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.exchange_button.setFont(font)
        self.exchange_button.setObjectName("exchange_button")


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 753, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        oracleOper = exportsql.oracleOperation()
        oracleOper.openOracleConn()
        self.oracleOper = oracleOper
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_6.setText(
            _translate("MainWindow", "<html><head/><body><p>支持接收模板/接口/data_key  这三个其中一种</p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "数据源"))
        self.label_3.setText(_translate("MainWindow", "提取标识"))
        self.label_5.setText(_translate("MainWindow", "选择提取数据库"))
        index = 0
        for db in exportsql.dbconnectlist.keys():
            self.db_source.setItemText(index, _translate("MainWindow", db))
            index+=1

        self.export_button.setText(_translate("MainWindow", "点击生成脚本"))
        self.export_button.clicked.connect(self.startexport)

        self.exchange_button.setText(_translate("MainWindow", "转换到生产临时表"))
        self.exchange_button.clicked.connect(self.exchangesql)




    def startexport(self):
        #绑定异步进程
        self.loadthread = qtloading.LoadingThread()
        self.loadthread._signal.connect(self.flush)
        self.loadthread._current = self

        currentdb  = self.db_source.currentText()
        currentconn = exportsql.dbconnectlist[currentdb]
        input_key = self.input_key.text().strip()
        checkFlag = self.checkinput(input_key,currentconn)
        if not checkFlag in "TID":
            self.msg("非PD_CFGTEMPLATE_DICT/PD_CFGINTERFACE_DICT/PD_CFGDATA_DICT中定义的值，请核查！")
            return False

        self.checkLabel = checkFlag
        self.loadthread.start()
        self.export_button.setText("请等待...")
        self.export_button.setEnabled(False)




    #属性按钮文字
    def flush(self):
        input_key = self.input_key.text().strip()
        #关闭附带窗口
        root = tk.Tk()
        root.withdraw()

        filename = input_key
        #获取用户保存的文件路径
        options ={}
        options['initialfile'] = filename
        options['defaultextension'] = '.sql'
        options['filetypes'] = [('脚本','.sql')]

        savepath = filedialog.asksaveasfilename(**options)
        if not savepath:
            self.msg("请选择保存路径！")
            self.export_button.setText("点击生成脚本")
            self.export_button.setEnabled(True)
            return False

        with open(savepath, 'w') as file_object:
            for n in self.content:
                file_object.write(n)
        self.export_button.setText("点击生成脚本")
        self.export_button.setEnabled(True)
        self.msg("成功！")
        print("-----------flush---------------")



    # 对输入的 提取标识 进行判断 是否满足查询条件
    def checkinput(self,input_key,connection):
        checksql = """
        select 'T' from dbpmsadm.pd_cfgtemplate_dict where template_id ='{0}'
        union 
        select 'I' from dbpmsadm.pd_cfginterface_dict where interface_id ='{0}'
        union 
        select 'D' from dbpmsadm.pd_cfgdata_dict where data_key ='{0}'""".format(input_key)

        with connection.cursor() as cursor:
            result = cursor.execute(checksql)
            row = cursor.fetchone()
            if not row:
                return "None"


        return row[0]

    #点击 生成 触发的导出脚本函数
    def exportsqls(self):
        currentdb  = self.db_source.currentText()
        currentconn = exportsql.dbconnectlist[currentdb]
        input_key = self.input_key.text().strip()
        if self.checkLabel == 'T':
            self.content = self.oracleOper.export_tmp_sql(input_key, currentconn)
        elif self.checkLabel == 'I':
            self.content = self.oracleOper.export_inter_sql(input_key, currentconn)
        elif  self.checkLabel == 'D':
            self.content = self.oracleOper.export_data_key_sql(input_key, currentconn)
        else:
            pass

    #错误信息提示
    def msg(self,message):
        # 使用infomation信息框
        reply = QMessageBox.information(self, "提示",
                                        message)
    #把脚本文件中的sql转换为生产临时表脚本文件
    def exchangesql(self):
        table_map = {}
        table_map['DBPMSADM.PD_CFGTEMPLATE_DICT'] = 'DBQUERY.PD_CFGTEMPLATE_DICT_P'
        table_map['DBPMSADM.PD_CFGINTERFACE_DICT'] = 'DBQUERY.PD_CFGINTERFACE_DICT_P'
        table_map['DBPMSADM.PD_CFGTEMPLATEINTERFACE_REL'] = 'DBQUERY.PD_CFGTEMPLATEINTERFACE_REL_P'
        table_map['DBPMSADM.PD_CFGINTERFACESTEP_REL'] = 'DBQUERY.PD_CFGINTERFACESTEP_REL_P'
        table_map['DBPMSADM.PD_CFGELEMENT_DICT'] = 'DBQUERY.PD_CFGELEMENT_DICT_P'
        table_map['DBPMSADM.PD_CFGDATA_DICT'] = 'DBQUERY.PD_CFGDATA_DICT_P'
        table_map['DBPMSADM.PD_CFGTEMPLATE_DICT'] = 'DBQUERY.PD_CFGTEMPLATE_DICT_P'
        table_map['DBPMSADM.PD_CFGTEMPLATE_DICT'] = 'DBQUERY.PD_CFGTEMPLATE_DICT_P'

        # 关闭附带窗口
        root = tk.Tk()
        root.withdraw()
        #开始读取原脚本文件
        filepath = filedialog.askopenfile()
        filecontent = filepath.read()
        # with open(filepath, 'r') as file_object:


        for t in table_map.keys():
            filecontent = re.sub(t,table_map[t],filecontent,flags = re.IGNORECASE)

        options = {}
        options['initialfile'] = "dbquery_"+filepath.name.split("/")[-1]
        options['defaultextension'] = '.sql'
        options['filetypes'] = [('脚本','.sql')]
        savepath = filedialog.asksaveasfilename(**options)
        if not savepath:
            self.msg("请选择保存路径！")
            return False

        with open(savepath, 'w') as file_object:
                file_object.write(filecontent)

        self.msg("转换成功！")






def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)  #实例化QApplication 类 作为GUI主程序的入口
    MainWindow = QtWidgets.QMainWindow()    #创建MainWindow
    ui = Ui_MainWindow()                    #创建实例UI类
    ui.setupUi(MainWindow)                  #设置窗体UI
    # 设置窗口图标
    icon = QtGui.QIcon()
    icon.addPixmap(QtGui.QPixmap("sqlexporter.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
    ui.setWindowIcon(icon)
    MainWindow.show()                       #显示窗体
    sys.exit(app.exec_())                   #当窗口创建完成， 要结束主循环过程

if __name__ == "__main__":
    show_MainWindow()


